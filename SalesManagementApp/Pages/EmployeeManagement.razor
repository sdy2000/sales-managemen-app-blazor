@page "/EmployeeManagement"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner

@inject IEmployeeManagementService EmployeeManagementService

<h3>EmployeeManagement</h3>


<div class="container">
    <SfGrid @ref="SfEmployeeGrid" AllowExcelExport="true" AllowPdfExport="true" AllowFiltering="true" AllowSorting="true" DataSource="employeeData" Toolbar="@toolbar">
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true">
            <HeaderTemplate>
                <span>@(GetDialogHeaderText(context as EmployeeViewModel))</span>
            </HeaderTemplate>
            <FooterTemplate>
                <SfButton OnClick="@Save" IsPrimary = "true">@DialogButtonCaption</SfButton>
                <SfButton OnClick="@Cancel">Cancel</SfButton>
            </FooterTemplate>
        </GridEditSettings>
        <GridEvents OnToolbarClick="ToolbarBtnClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="EmployeeViewModel"></GridEvents>
       <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridColumns>

            @*Spinner*@
            <SfSpinner @bind-Visible="@VisibleProp"></SfSpinner>

            @* Column Count*@
            <GridColumn HeaderText="Row Number" AllowAdding="false" AllowEditing="false" Width="100px">
                <Template>
                    @{
                        var employee = (context as EmployeeViewModel);
                        var rowIndex = employeeData.IndexOf(employee) + 1;
                        <span>@rowIndex</span>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(EmployeeViewModel.Id)" IsPrimaryKey="true"  AllowAdding="false"  AllowEditing="false"  HeaderText="ID" Visible="false"></GridColumn>


            @*Profile Image Column and Dropdonw Setting*@
            <GridColumn HeaderText="Profile" AllowAdding="false" AllowEditing="false" Width="120px">
                <Template>
                    @{
                        var employee = (context as EmployeeViewModel);
                        <div class="profile-image-container">
                            <img src="@(employee?.ImagePath)" />
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(EmployeeViewModel.FirstName)" HeaderText="First Name"></GridColumn>
            <GridColumn Field="@nameof(EmployeeViewModel.LastName)" HeaderText="Last Name"></GridColumn>

            @*Designation Column and Dropdonw Setting*@
            <GridForeignColumn Field="@nameof(EmployeeViewModel.EmployeeJobTitleId)"
                               TValue="EmployeeJobTitle"
                               ForeignDataSource="employeeJobTitleData"
                               ForeignKeyValue="Name"
                               HeaderText="Designation"
                               Width="100px">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as EmployeeViewModel).EmployeeJobTitleId)"
                                    ID="EmployeeJobTitleId"
                                    DataSource="employeeJobTitleData"
                                    TItem="EmployeeJobTitle"
                                    TValue="int">
                        <DropDownListFieldSettings Text="Name" Value="EmployeeJobTitleId"></DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>

            @*Gender Column and Dropdonw Setting*@
            <GridColumn Field="@nameof(EmployeeViewModel.Gender)" HeaderText="Gender" Width="100px">
                <EditTemplate>
                    <SfDropDownList DataSource="genderCollection"
                                    TItem="string" TValue="string"
                                    @bind-value="@((context as EmployeeViewModel).Gender)">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(EmployeeViewModel.Email)" HeaderText="Email" Width="170px"></GridColumn>
            <GridColumn Field="@nameof(EmployeeViewModel.DateOfBirth)" HeaderText="DOB" Format="d"></GridColumn>

            @*Reports Column and Dropdonw Setting*@
            <GridForeignColumn Field="@nameof(EmployeeViewModel.ReportToEmpId)"
                               TValue="ReportToViewModel"
                               ForeignDataSource="reportToEmpoloyeeData"
                               ForeignKeyValue="ReportToName"
                               HeaderText="Reports To"
                               Width="100px">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as EmployeeViewModel).ReportToEmpId)"
                                    ID="ReportToEmpId"
                                    DataSource="reportToEmpoloyeeData"
                                    TItem="ReportToViewModel"
                                    TValue="Nullable<int>">
                        <DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId"></DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>

            @*Operations Buttons*@
            <GridColumn HeaderText="Operations" Width="110">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-edit",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-delete",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-update",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-cancel-icon",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

<style>
    .profile-image-container {
        width: 80px;
        height: 80px;
    }

        .profile-image-container img {
            width: 100%;
            height: 100%;
            border-radius: 50px;
        }
</style>


@code {

    public SfGrid<EmployeeViewModel>? SfEmployeeGrid { get; set; }
    public bool VisibleProp { get; set; } = false;
    private string DialogButtonCaption { get; set; }


    private string[] genderCollection = Enum.GetNames(typeof(GenderValEnum));

    private List<EmployeeViewModel>? employeeData = null;
    private List<EmployeeJobTitle>? employeeJobTitleData;
    private List<ReportToViewModel>? reportToEmpoloyeeData;

    private List<object> toolbar = new List<object> { "Add", "Update", "Cancel", "Search","ExcelExport","PdfExport",
    new ItemModel(){Text = "XML Export", TooltipText ="Export Data to XML",
                                        PrefixIcon = "e-click", Id = "XmlExport"} };

    protected override async Task OnInitializedAsync()
    {
        VisibleProp = true;

        employeeData = await EmployeeManagementService.GetEmployees();
        employeeJobTitleData = await EmployeeManagementService.GetEmployeeJobTitles();
        reportToEmpoloyeeData = await EmployeeManagementService.GetReportToEmployees();

        VisibleProp = false;
    }

    //Grid Event => On Action Begin
    public async void ActionBeginHandler(ActionEventArgs<EmployeeViewModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await EmployeeManagementService.AddEmployee(args.Data);
                await EmployeeManagementService.SaveChanges();
            }
            if (args.Action == "Edit")
            {
                await EmployeeManagementService.UpdateEmployee(args.Data);
                await EmployeeManagementService.SaveChanges();
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await EmployeeManagementService.DeleteEmployee(args.Data.Id);
            await EmployeeManagementService.SaveChanges();

        }
    }

    //Grid Event => On Action Complete
    public async void ActionCompleteHandler(ActionEventArgs<EmployeeViewModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                employeeData = await EmployeeManagementService.GetEmployees();

                SfEmployeeGrid?.Refresh();
            }
        }
    }

    // Grid Event => On Toolbar Click
    public async void ToolbarBtnClickHandler(ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid?.ExportToExcelAsync();
        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid?.ExportToPdfAsync();
        }
        else if (args.Item.Id.Contains("XmlExport"))
        {
            Console.Write("Export to Xml functionality");
        }
    }

    // Grid Event => On Toolbar Click
    private string GetDialogHeaderText(EmployeeViewModel employeeModel)
    {
        if (employeeModel.Id == 0)
        {
            DialogButtonCaption = "Add";
            return "Add Employee";
        }
        else
        {
            DialogButtonCaption = "Update";
            return $"Edit Details: {employeeModel.FirstName} {employeeModel.LastName}";
        }
    }

    private async Task Cancel()
    {
        await SfEmployeeGrid.CloseEditAsync();
    }
    private async Task Save()
    {
        await SfEmployeeGrid.EndEditAsync();
    }
}
